import static Constants.VERSION_FILE

class Constants {
    static final VERSION_FILE = 'VERSION'
}

loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'development'
    project.ext.set('environment', environment)

    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURI().toURL())
    project.ext.set('config', config)
}

def generateVersionName() {
    println("version number is: ${property('version')}")
    def versionNumber = hasProperty('version') != 'unspecified' ? property('version') : ''
    File versionFile = new File(VERSION_FILE)

    if (versionNumber != '' && versionNumber != 'unspecified') {
        if (versionFile.exists()) {
            versionFile.delete()
        }
        versionFile = new File(VERSION_FILE)
        versionFile << ("${versionNumber}")
        if (environment == 'staging' || environment == 'qual' || environment == 'production') {
            bumpGitTags(versionNumber)
        }
        "$versionNumber"
    } else {
        if (versionFile.exists()) {
            versionFile.getText();
        } else {
            "unspecified"
        }
    }
}

def getMajorVersion() {
    1
}

def generateVersionCode() {
    def code = (System.currentTimeMillis() / 1000) - 1000000000 //
    def version = (code * getMajorVersion()).intValue()
    System.out.println(String.format("Current version code: %d", version))
    version
}

def bumpGitTags(version) {

    branch = hasProperty('branch') ? property('branch') : ''
    branch = branch == '' ? 'master' : branch

    def git_commands = [
        ['git', 'fetch', '--tags'],
        ['git', 'add', '.'],
        ['git', 'commit', '-m', "bumped version to $version"],
        ['git', 'push', 'origin', branch],
        ['git', 'push', 'origin', '--delete', environment],
        ['git', 'push', 'origin', '--delete', version],
        ['git', 'tag', '-af', version, '-m', version],
        ['git', 'tag', '-af', environment, '-m', "deployed ${version}"],
        ['git', 'push', '--tags']
    ]


    for (command in git_commands) {
        println(command)
        def proc = command.execute()
        proc.waitFor()
        println "return code: ${proc.exitValue()}"
        println "stderr: ${proc.err.text}"
        println "stdout: ${proc.in.text}" // *out* from the external program is *in* for groovy
    }

}

def printEnvironmentVariables() {
    println "-----------------------------------------------------------------"
    println "Environment is set to $environment"
    println "intent_name:               $config.intent_name"
    println "intent_uri:                $config.intent_uri"
    println "mydigipass_package_name:   $config.mydigipass_package_name"
    println "mdp_fallback_url:          $config.mdp_fallback_url"
    println "-----------------------------------------------------------------"
}

task(mydigipass) {
    description = 'Show the mydigipass environment variables.'
    printEnvironmentVariables()
}


buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        classpath 'com.squareup.gradle:gradle-android-test-plugin:0.9.1-SNAPSHOT'
    }
}
apply plugin: 'android-library'
apply plugin: 'android-test'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        versionCode generateVersionCode()
        versionName generateVersionName()
        minSdkVersion 7
        targetSdkVersion 19

        buildConfigField "String", "INTENT_NAME", "\"$config.intent_name\"";
        buildConfigField "String", "INTENT_URI", "\"$config.intent_uri\"";
        buildConfigField "String", "MYDIGIPASS_PACKAGE_NAME", "\"$config.mydigipass_package_name\"";
        buildConfigField "String", "MDP_FALLBACK_URL", "\"$config.mdp_fallback_url\"";
    }

    buildTypes {
        release {
            runProguard false
            proguardFile 'proguard-rules.txt'
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }

    sourceSets {
        instrumentTest.setRoot('src/test')
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'

    testCompile 'junit:junit:4.10'
    testCompile 'org.slf4j:slf4j-simple:1.7.5'
    testCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    testCompile 'com.squareup:fest-android:1.0.+'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.4.9'
    testCompile 'org.powermock:powermock-mockito-release-full:1.4.9'

    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.slf4j:slf4j-simple:1.7.5'
    androidTestCompile 'org.robolectric:robolectric:2.3-SNAPSHOT'
    androidTestCompile 'com.squareup:fest-android:1.0.+'
    androidTestCompile 'org.powermock:powermock-module-junit4-rule-agent:1.4.9'
    androidTestCompile 'org.powermock:powermock-mockito-release-full:1.4.9'
}
