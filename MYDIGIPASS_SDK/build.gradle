apply plugin: 'com.android.library'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.0.1'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.robolectric:robolectric:3.0-rc2"
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        versionCode 3
        versionName "1.2.0"
        minSdkVersion 14
        targetSdkVersion 23

        buildConfigField "String", "INTENT_NAME", "\"com.vasco.intent.authenticate\"";
        buildConfigField "String", "INTENT_URI", "\"authenticate://mydigipass.com/\"";
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    productFlavors {
        development {
            def configFile = file("config.groovy")

            if (!configFile.exists()) {
                throw new GradleException("Please setup your development environment. (Copy development.groovy.example to development.groovy)")
            }
            def config = new ConfigSlurper("development").parse(configFile.toURI().toURL())

            buildConfigField "String", "MYDIGIPASS_PACKAGE_NAME", "\"$config.mydigipass_package_name\"";
            buildConfigField "String", "MDP_FALLBACK_URL", "\"$config.mdp_fallback_url\"";
        }

        production {
            buildConfigField "String", "MYDIGIPASS_PACKAGE_NAME", "\"com.vasco.mydigipass\"";
            buildConfigField "String", "MDP_FALLBACK_URL", "\"https://www.mydigipass.com/oauth/authenticate\"";
        }
    }
}

gradle.projectsEvaluated {
    // Base path which is recognized by android studio.
    def testClassesPath = "${buildDir}/intermediates/classes/test/"
    // Copy must be done for each variant.
    def variants = []

    variants.each { variant ->
        def variationName = variant.name.capitalize()

        // Get the flavor and also merge flavor groups.
        def productFlavorNames = variant.productFlavors.collect { it.name.capitalize() }
        if (productFlavorNames.isEmpty()) {
            productFlavorNames = [""]
        }
        productFlavorNames = productFlavorNames.join('')

        // Base path addition for this specific variant.
        def variationPath = variant.buildType.name;
        if (productFlavorNames != null && !productFlavorNames.isEmpty()) {
            variationPath = uncapitalize(productFlavorNames) + "/${variationPath}"
        }

        // Specific copy task for each variant
        def copyTestResourcesTask = project.tasks.create("copyTest${variationName}Resources", Copy)
        copyTestResourcesTask.from("${projectDir}/src/test/resources")
        copyTestResourcesTask.into("${testClassesPath}/${variationPath}")
        copyTestResourcesTask.execute()
    }
}
